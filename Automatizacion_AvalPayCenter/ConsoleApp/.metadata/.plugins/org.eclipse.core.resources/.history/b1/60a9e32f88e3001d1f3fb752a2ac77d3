package PageObjects;

import static org.testng.Assert.assertEquals;

import java.io.File;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;

import MapsObjects.ConfirmaTuPago;
import RunPruebas.RunHU2;
import Utilidades.Sprint1Utilities;
import io.qameta.allure.Step;

public class ConfirmaTuPagoPage extends ConfirmaTuPago {

	private static Logger log = LogManager.getLogger(RunHU2.class.getName());

	public ConfirmaTuPagoPage(WebDriver driver) {
		super(driver);
	}

	Sprint1Utilities sprint1utilities = new Sprint1Utilities(driver);

	
	@Step("Metodo para ingresar a los Terminos y condiciones")
	public void TerminosYCondiciones(File folderPath, String busqueda, String documento, String valor, String detalle,
			String generarEvidencia) throws Exception {
		sprint1utilities.MetodoIframe("iframe-buscador");
		sendkey(busqueda, txtBusqueda, folderPath, generarEvidencia,"Se ingresa nombre del convenio");
		enter();
		tiempoEspera(3);
		scrollElement(btnPagarServicio, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		click(btnPagarServicio, folderPath, generarEvidencia,"Se da click en boton Pagar");
		scrollWeb(400, 0, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		sprint1utilities.MetodoIframe("iframe-nofacturador");
		sendkey(documento, campoCedula, folderPath, generarEvidencia, "Se ingresa el numero de cedula o nit");
		sendkey(documento, campoConfirmarCedula, folderPath, generarEvidencia,"Se confirma el numero de cedula o nit");
		sendkey(valor, campoValorPagar, folderPath, generarEvidencia,"Se ingresa el valor a pagar");
		sendkey(detalle, campoDetalle, folderPath, generarEvidencia,"Se ingresa el detalle");
		scrollElement(btnContinuar, folderPath, generarEvidencia,"Scroll de visualizacion");
		click(btnContinuar, folderPath, generarEvidencia,"Se da click en el boton Continuar");
	}
	
	@Step("Metodo para confirmacion boton Volver")
	public void botonVolver(File folderPath, String busqueda, String documento, String valor, String detalle,
			String generarEvidencia) throws Exception {
		try {

			// OBTENER EL NOMBRE DEL TEST - (ScreenShot's)
			String nomTest = Thread.currentThread().getStackTrace()[1].getMethodName();

			// CONFIRMACIÓN
			System.out.println("**EL METODO DE " + nomTest + " HA INICIADO**");
			log.info("**EL METODO DE " + nomTest + " HA INICIADO**");

			sprint1utilities.MetodoIframe("iframe-buscador");
			sendkey(busqueda, txtBusqueda, folderPath, generarEvidencia,"Se ingresa nombre del convenio");
			enter();
			tiempoEspera(4);
			scrollElement(btnPagarServicio, folderPath, generarEvidencia,"Se visualiza el boton Pagar");
			click(btnPagarServicio, folderPath, generarEvidencia,"Se da click en boton Pagar");
			scrollWeb(400, 0, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
			sprint1utilities.MetodoIframe("iframe-nofacturador");
			sendkey(documento, btnPagarServicio, folderPath, generarEvidencia,"Se ingresa el numero de cedula o nit");
			sendkey(documento, campoConfirmarCedula, folderPath, generarEvidencia,"Se confirma el numero de cedula o nit");
			sendkey(valor, campoValorPagar, folderPath, generarEvidencia,"Se ingresa el valor a pagar");
			sendkey(detalle, campoDetalle, folderPath, generarEvidencia,"Se ingresa el detalle");
			scrollElement(btnContinuar, folderPath, generarEvidencia,"Scroll de visualizacion");
			click(btnContinuar, folderPath, generarEvidencia,"Se da click en el boton Continuar");
			click(btnVolver, folderPath, generarEvidencia,"Se da click en el boton volver");
			scrollElement(assertModuloDigitaTusDatosPagos, folderPath, generarEvidencia,"Scroll de visualizacion");
			// ASSERT - SP2_HU02_CP11
			displayed(assertModuloDigitaTusDatosPagos, folderPath, generarEvidencia,
					"Se valida CP11 - Validar que el botón Volver me retorne a la pantalla anterior(Digita tus datos de pago)");
			System.out.println("Se valida el SP2_HU02_CP11");

			// CONFIRMACIÓN
			System.out.println("**EL METODO DE " + nomTest + " HA CULMINADO CORRECTAMENTE**");
			log.info("**EL METODO DE " + nomTest + " HA CULMINADO CORRECTAMENTE**");

		} catch (Exception e) {
			// ERROR
			printConsole("Estado del caso: Fallido");
			printConsole("### EL ERROR ES: " + e + " ###");
			log.error(e.toString());
			throw new InterruptedException();
		}

	}

	/////////////////////////////////////////////////// FLUJO
	/////////////////////////////////////////////////// CORRECTO///////////////////////////////////////////////
	@Step("Metodo para confirmacion boton Pagar")
	public void botonPagar(File folderPath, String busqueda, String documento, String valor, String detalle,
			String generarEvidencia) throws Exception {
		sprint1utilities.MetodoIframe("iframe-buscador");
		sendkey(busqueda, txtBusqueda, folderPath, generarEvidencia,"Se ingresa nombre del convenio");
		enter();
		tiempoEspera(3);
		click(btnPagarServicio, folderPath, generarEvidencia,"Se da click en boton Pagar");
		scrollWeb(400, 0, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		sprint1utilities.MetodoIframe("iframe-nofacturador");
		sendkey(documento, campoCedula, folderPath, generarEvidencia,"Se ingresa el numero de cedula o nit");
		sendkey(documento, campoConfirmarCedula, folderPath, generarEvidencia,"Se confirma el numero de cedula o nit");
		sendkey(valor, campoValorPagar, folderPath, generarEvidencia, "Se ingresa el valor a pagar");
		sendkey(detalle, campoDetalle, folderPath, generarEvidencia,"Se ingresa el detalle");
		scrollElement(btnContinuar, folderPath, generarEvidencia,"Scroll de visualizacion");
		click(btnContinuar, folderPath, generarEvidencia, "Se da click en el boton Continuar");
		scrollElement(assertPaso1Buscar, folderPath, generarEvidencia,"Scroll de visualizacion");

		// ASSERT - SP2_HU02_CP02
		displayed(btnPagar2, folderPath, generarEvidencia,
				"Se valida CP02 - Validar ingreso a paso 3: Confirma tu pago");
		System.out.println("Se valida el SP2_HU02_CP02");

		// ASSERT - SP2_HU02_CP03
		assertEquals(textoValidacion(assertPaso1Buscar, folderPath,
				"Se valida CP03 - Validar barra de progreso del proceso de pago -Paso 1 Busca tu servicio o empresa"),
				"Busca tu servicio o empresa");
		assertEquals(textoValidacion(assertPaso2Digitar, folderPath,
				"Se valida CP03 - Validar barra de progreso del proceso de pago -Paso 2 Digita tus datos de pago"),
				"Digita tus datos de pago");
		assertEquals(
				textoValidacion(assertPaso3Confirmar, folderPath,
						"Se valida CP03 - Validar barra de progreso del proceso de pago -Paso 3 Confirma tu pago"),
				"Confirma tu pago");
		assertEquals(
				textoValidacion(assertPaso4PagaFacil, folderPath,
						"Se valida CP03 - Validar barra de progreso del proceso de pago -Paso 4 Paga fácil y seguro"),
				"Paga fácil y seguro");
		assertEquals(
				textoValidacion(assertPaso5Recibe, folderPath,
						"Se valida CP03 - Validar barra de progreso del proceso de pago -Paso 5 Recibe tu comprobante"),
				"Recibe tu comprobante");
		System.out.println("Se valida el SP2_HU02_CP03");

		// ASSERT - SP2_HU02_CP04
		displayed(assertLogo, folderPath, generarEvidencia, "Se valida CP04 - Visualizacion del logo del convenio");
		System.out.println("Se valida el SP2_HU02_CP04");

		// ASSERT - SP2_HU02_CP05
		assertEquals(textoValidacion(assertCampoServicioaPagar, folderPath,
				"Se valida CP05 - Se valida que se encuentra el campo Servicio a pagar: con su respectiva informacion y no es editable"),
				"Servicio a pagar:");
		assertEquals(textoValidacion(assertCampoDigiteCedula, folderPath,
				"Se valida CP05 - Se valida que se encuentra el campo Digite aqui su cedula o nit: con su respectiva informacion y no es editable"),
				"Digite aqui su cedula o nit:");
		assertEquals(textoValidacion(assertCampoValoraPagar, folderPath,
				"Se valida CP05 - Se valida que se encuentra el campo Valor a pagar: con su respectiva informacion y no es editable"),
				"Valor a pagar:");
		assertEquals(textoValidacion(assertCampoCostoTransaccion, folderPath,
				"Se valida CP05 - Se valida que se encuentra el campo Costo de la transacción: con su respectiva informacion y no es editable"),
				"Costo de la transacción:");
		assertEquals(textoValidacion(assertCampoDetallePago, folderPath,
				"Se valida CP05 - Se valida que se encuentra el campo Detalle del pago: con su respectiva informacion y no es editable"),
				"Detalle del pago:");
		System.out.println("Se valida el SP2_HU02_CP05");

		click(btnPagar2, folderPath, generarEvidencia,"Se da click en boton pagar");

		// ASSERT - SP2_HU02_CP09
		assertEquals(textoValidacion(assertTerminosCondiciones, folderPath,
				"Se valida CP09 - Se valida que se encuentra la alerta de que no acepto los terminos y condiciones"),
				"Por favor acepta los términos y condiciones de uso para realizar tu pago.");
		assertEquals(
				textoValidacion(btnCerrar, folderPath, "Se valida CP09 - Se valida que se encuentra el boton Cerrar"),
				"Cerrar");
		System.out.println("Se valida el SP2_HU02_CP09");

		// ASSERT - SP2_HU02_CP10
		assertEquals(
				textoValidacion(assertMensajePagoAgil, folderPath,
						"Se valida CP10 - Se valida que se encuentra el mensaje informativo de Pago Agil"),
				"Utiliza el Pago Ágil, para que no tengas que diligenciar la información del pago si ya te encuentras registrado en nuestro portal");
		System.out.println("Se valida el SP2_HU02_CP10");

		click(btnCerrar, folderPath, generarEvidencia,"Se da click en Cerrar");
		click(checkbox, folderPath, generarEvidencia, "Se da click en el Checkbox");
		click(btnPagar2, folderPath, generarEvidencia, "Se da click en boton pagar");

		// ASSERT - SP2_HU02_CP12
		assertEquals(
				textoValidacion(assertFormularioPasarela, folderPath,
						"Se valida CP12 - Validar que el botón Pagar se dirija a la pasarela de pagos"),
				"Titular del Medio de Pago");
		System.out.println("Se valida el SP2_HU02_CP12");
	}

	@Step("Metodo para confirmacion boton Pago Agil")
	public void botonPagoAgil(File folderPath, String busqueda, String documento, String valor, String detalle,
			String generarEvidencia) throws Exception {
		sprint1utilities.MetodoIframe("iframe-buscador");
		sendkey(busqueda, txtBusqueda, folderPath, generarEvidencia, "Se ingresa nombre del convenio");
		enter();
		tiempoEspera(3);
		click(btnPagarServicio, folderPath, generarEvidencia, "Se da click en boton Pagar");
		scrollWeb(400, 0, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		sprint1utilities.MetodoIframe("iframe-nofacturador");
		sendkey(documento, campoCedula, folderPath, generarEvidencia, "Se ingresa el numero de cedula o nit");
		sendkey(documento, campoConfirmarCedula, folderPath, generarEvidencia,"Se confirma el numero de cedula o nit");
		sendkey(valor, campoValorPagar, folderPath, generarEvidencia,"Se ingresa el valor a pagar");
		sendkey(detalle, campoDetalle, folderPath, generarEvidencia,"Se ingresa el detalle");
		scrollElement(btnContinuar, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		click(btnContinuar, folderPath, generarEvidencia, 4, "Se da click en el boton Continuar");
		// scrollElement(assertPaso1Buscar);
		// click(btnPagoAgil, folderPath, "Se da click en boton Pago Agil", 5, detalle);
	}

	

	public void FlujoPrincipal(String busqueda, String documento, String valor, String detalle, String generarEvidencia,
			File folderPath) throws Exception {

		tiempoEspera(6);

		sprint1utilities.ValidacionObjeto(validarElemento(txtBusqueda, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(txtBusqueda, 10), "Validacion de aplicacion caso: ");
		// MetodoIframe
		tiempoEspera(2);
		// sendkey(busqueda, txtBusqueda2, folderPath, "Se busca el elemento");
		click(btnBusqueda, folderPath, "Se da click en boton busqueda", 5, generarEvidencia);
		scrollElement(txtServicio, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		click(btnPagarServicio, folderPath, "Se da click en boton pagar", 5, generarEvidencia);

		// CREAR VARIABLE CON ESCRITURA RANDOM Y USARLA EN LOS CAMPOS REQUERIDOS
		String ValorDocumento = sprint1utilities.writeRandomNum2(4);
		Integer.parseInt(ValorDocumento);

		sendkey(ValorDocumento, txtDocumento, folderPath, "Se ingresa numero de documento", 2, ValorDocumento);
		sendkey(ValorDocumento, txtConfirmCedula, folderPath, "Se confirma numero de documento", 2, ValorDocumento);
		sendkey(valor, txtValor, folderPath, "Se ingresa valor a pagar", 2, ValorDocumento);
		sendkey(detalle, txtDetallePago, folderPath, "Se ingresa detalle del pago", 2, ValorDocumento);
		scrollElement(btnContinuar, folderPath, generarEvidencia, 2, "Scroll de visualizacion");

		sprint1utilities.ValidacionObjeto(validarElemento(txtDocumento, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(txtDocumento, 10), "Validacion de aplicacion caso: ");
		sprint1utilities.ValidacionObjeto(validarElemento(txtConfirmCedula, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(txtConfirmCedula, 10), "Validacion de aplicacion caso: ");
		sprint1utilities.ValidacionObjeto(validarElemento(txtValor, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(txtValor, 10), "Validacion de aplicacion caso: ");
		sprint1utilities.ValidacionObjeto(validarElemento(txtDetallePago, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(txtDetallePago, 10), "Validacion de aplicacion caso: ");
		sprint1utilities.ValidacionObjeto(validarElemento(btnContinuar, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(btnContinuar, 10), "Validacion de aplicacion caso: ");

		click(btnContinuar, folderPath, "Se da click en boton continuar", 0, ValorDocumento);

	}

	public void FlujoPrincipalCancelacion(File folderPath, String busqueda, String documento, String valor,
			String detalle, String generarEvidencia) throws Exception {
		sprint1utilities.ValidacionObjeto(validarElemento(txtBusqueda, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(txtBusqueda, 10), "Validacion de aplicacion caso: ");
		sendkey(busqueda, txtBusqueda, folderPath, "Se busca el elemento", 0, generarEvidencia);
		click(btnBusqueda, folderPath, "Se da click en boton busqueda", 0, generarEvidencia);
		scrollElement(txtServicio, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		click(btnPagarServicio, folderPath, "Se da click en boton pagar", 0, generarEvidencia);
		// CREAR VARIABLE CON ESCRITURA RANDOM Y USARLA EN LOS CAMPOS REQUERIDOS
		String ValorDocumento = sprint1utilities.writeRandomNum2(4);

		Integer.parseInt(ValorDocumento);

		sendkey(ValorDocumento, txtDocumento, folderPath, "Se ingresa numero de documento", 0, ValorDocumento);
		sendkey(ValorDocumento, txtConfirmCedula, folderPath, "Se confirma numero de documento", 0, ValorDocumento);
		sendkey(valor, txtValor, folderPath, "Se ingresa valor a pagar", 0, ValorDocumento);
		sendkey(detalle, txtDetallePago, folderPath, "Se ingresa detalle del pago", 0, ValorDocumento);
		scrollElement(btnContinuar, folderPath, generarEvidencia, 2, "Scroll de visualizacion");
		sprint1utilities.ValidacionObjeto(validarElemento(btnVolver, 3), "", folderPath, generarEvidencia, "");
		Assert.assertTrue(validarElemento(btnVolver, 10), "Validacion de aplicacion caso: ");

		click(btnVolver, folderPath, "Se da click en boton volver", 0, ValorDocumento);

	}

}
